{"version":3,"file":"electronEventSignals.js","sourceRoot":"","sources":["electronEventSignals.ts"],"names":[],"mappings":";;AAAA,qCAAyE;AAUzE,SAAS,SAAS,CAAC,CAAS;IACxB,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,KAAK,MAAM,CAAC,CAAC;AACzD,CAAC;AAED,IAAM,UAAU,GAAG,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;AAErD,SAAS,UAAU,CAAC,OAAqB,EAAE,KAAa,EAAE,OAAiC;IAA3F,iBASC;IARG,IAAI,UAAU,EAAE;QACZ,OAAO,CAAC,EAAE,CAAC,KAAK,EAAE;YAAC,cAAc;iBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gBAAd,yBAAc;;YAC7B,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;YAClC,OAAO,CAAC,KAAK,CAAC,KAAI,EAAE,IAAI,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;KACN;SAAM;QACH,OAAO,CAAC,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;KAC9B;AACL,CAAC;AAED;IACI,2BAAoB,OAAoB;QAApB,YAAO,GAAP,OAAO,CAAa;IACxC,CAAC;IAEM,qCAAS,GAAhB,UAAiB,OAAuD;QACpE,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;QAClD,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,2CAAe,GAAtB,UAAuB,OAAuD;QAC1E,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,sBAAsB,EAAE,OAAO,CAAC,CAAC;QAC1D,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,uCAAW,GAAlB,UAAmB,OAAmD;QAClE,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,uBAAuB,EAAE,OAAO,CAAC,CAAC;QAC3D,OAAO,IAAI,CAAC;IAChB,CAAC;IACL,wBAAC;AAAD,CAAC,AAlBD,IAkBC;AAlBY,8CAAiB;AAoB9B;IAAA;QACY,YAAO,GAAG,cAAG,CAAC;IAW1B,CAAC;IATU,iCAAa,GAApB,UAAqB,OAAoD;QACrE,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,qBAAqB,EAAE,OAAO,CAAC,CAAC;QACzD,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,iCAAa,GAApB,UAAqB,OAAoD;QACrE,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,sBAAsB,EAAE,OAAO,CAAC,CAAC;QAC1D,OAAO,IAAI,CAAC;IAChB,CAAC;IACL,gBAAC;AAAD,CAAC,AAZD,IAYC;AAZY,8BAAS","sourcesContent":["import { app, BrowserWindow, EventEmitter, WebContents } from 'electron';\r\n\r\nexport interface WindowEvent {\r\n    sender: BrowserWindow;\r\n}\r\n\r\nexport interface WebContentsEvent {\r\n    sender: WebContents;\r\n}\r\n\r\nfunction isEnvTrue(v: string): boolean {\r\n    return v != null && (v.length === 0 || v === 'true');\r\n}\r\n\r\nconst isLogEvent = isEnvTrue(process.env.LOG_EVENTS);\r\n\r\nfunction addHandler(emitter: EventEmitter, event: string, handler: (...args: any[]) => void) {\r\n    if (isLogEvent) {\r\n        emitter.on(event, (...args: any[]) => {\r\n            console.log('%s %s', event, args);\r\n            handler.apply(this, args);\r\n        });\r\n    } else {\r\n        emitter.on(event, handler);\r\n    }\r\n}\r\n\r\nexport class WebContentsSignal {\r\n    constructor(private emitter: WebContents) {\r\n    }\r\n\r\n    public navigated(handler: (event: WebContentsEvent, url: string) => void): WebContentsSignal {\r\n        addHandler(this.emitter, 'did-navigate', handler);\r\n        return this;\r\n    }\r\n\r\n    public navigatedInPage(handler: (event: WebContentsEvent, url: string) => void): WebContentsSignal {\r\n        addHandler(this.emitter, 'did-navigate-in-page', handler);\r\n        return this;\r\n    }\r\n\r\n    public frameLoaded(handler: (event: any, isMainFrame: boolean) => void): WebContentsSignal {\r\n        addHandler(this.emitter, 'did-frame-finish-load', handler);\r\n        return this;\r\n    }\r\n}\r\n\r\nexport class AppSignal {\r\n    private emitter = app;\r\n\r\n    public windowBlurred(handler: (event: any, window: BrowserWindow) => void): AppSignal {\r\n        addHandler(this.emitter, 'browser-window-blur', handler);\r\n        return this;\r\n    }\r\n\r\n    public windowFocused(handler: (event: any, window: BrowserWindow) => void): AppSignal {\r\n        addHandler(this.emitter, 'browser-window-focus', handler);\r\n        return this;\r\n    }\r\n}\r\n"]}