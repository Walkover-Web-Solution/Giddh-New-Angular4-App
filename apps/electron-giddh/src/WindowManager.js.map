{"version":3,"file":"WindowManager.js","sourceRoot":"","sources":["WindowManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { app, BrowserWindow as BrowserWindowElectron, ipcMain } from 'electron';\r\nimport AppUpdaterV1 from './AppUpdater';\r\nimport { autoUpdater } from 'electron-updater';\r\nimport { WebContentsSignal, WindowEvent } from './electronEventSignals';\r\nimport { DEFAULT_URL, StateManager, WindowItem } from './StateManager';\r\nimport BrowserWindow = Electron.BrowserWindow;\r\nimport BrowserWindowConstructorOptions = Electron.BrowserWindowConstructorOptions;\r\n\r\nexport const WINDOW_NAVIGATED = 'windowNavigated';\r\n\r\nexport default class WindowManager {\r\n\r\n    private appUpdater: AppUpdaterV1 = null;\r\n    private stateManager = new StateManager();\r\n    private windows: BrowserWindow[] = [];\r\n\r\n    constructor() {\r\n        app.on('window-all-closed', () => {\r\n            // restore default set of windows\r\n            this.stateManager.restoreWindows();\r\n            // On OS X it is common for applications and their menu bar\r\n            // to stay active until the user quits explicitly with Cmd + Q\r\n            if (process.platform === 'darwin') {\r\n                // reopen initial window\r\n                // this.openWindows();\r\n                if (this.appUpdater && this.appUpdater.isUpdateDownloaded) {\r\n                    autoUpdater.quitAndInstall();\r\n                } else {\r\n                    app.quit();\r\n                }\r\n            } else {\r\n                if (this.appUpdater && this.appUpdater.isUpdateDownloaded) {\r\n                    setTimeout(() => {\r\n                        autoUpdater.quitAndInstall();\r\n                    }, 60000);\r\n                } else {\r\n                    app.quit();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public static saveWindowState(window: BrowserWindow, descriptor: WindowItem): void {\r\n        if (window.isMaximized()) {\r\n            delete descriptor.width;\r\n            delete descriptor.height;\r\n            delete descriptor.x;\r\n            delete descriptor.y;\r\n        } else {\r\n            const bounds = window.getBounds();\r\n            descriptor.width = bounds.width;\r\n            descriptor.height = bounds.height;\r\n            descriptor.x = bounds.x;\r\n            descriptor.y = bounds.y;\r\n        }\r\n    }\r\n\r\n    public openWindows(url: string = null): void {\r\n        let descriptors = this.stateManager.getWindows();\r\n        if (descriptors == null || descriptors.length === 0) {\r\n            this.stateManager.restoreWindows();\r\n            descriptors = this.stateManager.getWindows();\r\n        }\r\n\r\n        for (const descriptor of descriptors) {\r\n            if (isUrlInvalid(descriptor.url) && isUrlInvalid(url)) {\r\n                // was error on load\r\n                descriptor.url = DEFAULT_URL;\r\n            }\r\n            if (!isUrlInvalid(url)) {\r\n                descriptor.url = url;\r\n                console.log('all set');\r\n            }\r\n\r\n            const options: BrowserWindowConstructorOptions = {\r\n                // to avoid visible maximizing\r\n\r\n                show: false,\r\n                webPreferences: {\r\n                    nodeIntegration: true\r\n                },\r\n                tabbingIdentifier: 'giddh'\r\n            };\r\n\r\n            let isMaximized = true;\r\n            if (descriptor.width != null && descriptor.height != null) {\r\n                options.width = descriptor.width;\r\n                options.height = descriptor.height;\r\n                isMaximized = false;\r\n            }\r\n            if (descriptor.x != null && descriptor.y != null) {\r\n                options.x = descriptor.x;\r\n                options.y = descriptor.y;\r\n                isMaximized = false;\r\n            }\r\n\r\n            const window = new BrowserWindowElectron(options);\r\n            if (isMaximized) {\r\n                window.maximize();\r\n            }\r\n            window.loadURL(descriptor.url);\r\n            window.show();\r\n            this.registerWindowEventHandlers(window, descriptor);\r\n            this.windows.push(window);\r\n        }\r\n\r\n        // tslint:disable-next-line:no-unused-expression\r\n        this.appUpdater = new AppUpdaterV1();\r\n    }\r\n\r\n    public focusFirstWindow(): void {\r\n        if (this.windows.length > 0) {\r\n            const window = this.windows[0];\r\n            if (window.isMinimized()) {\r\n                window.restore();\r\n            }\r\n            window.focus();\r\n        }\r\n    }\r\n\r\n    private registerWindowEventHandlers(window: BrowserWindow, descriptor: WindowItem): void {\r\n        window.on('close', () => {\r\n            WindowManager.saveWindowState(window, descriptor);\r\n            const url = window.webContents.getURL();\r\n            if (!isUrlInvalid(url)) {\r\n                descriptor.url = url;\r\n            }\r\n            this.stateManager.save();\r\n        });\r\n        window.on('closed', (event: WindowEvent) => {\r\n            const index = this.windows.indexOf(event.sender);\r\n            console.assert(index >= 0);\r\n            this.windows.splice(index, 1);\r\n        });\r\n\r\n        window.on('app-command', (e: any, command: string) => {\r\n            // navigate the window back when the user hits their mouse back button\r\n            if (command === 'browser-backward') {\r\n                if (window.webContents.canGoBack()) {\r\n                    window.webContents.goBack();\r\n                }\r\n            } else if (command === 'browser-forward') {\r\n                if (window.webContents.canGoForward()) {\r\n                    window.webContents.goForward();\r\n                }\r\n            }\r\n        });\r\n\r\n        const webContents = window.webContents;\r\n        // cannot find way to listen url change in pure JS\r\n        new WebContentsSignal(webContents)\r\n            .navigated((event, url) => {\r\n                ipcMain.emit(WINDOW_NAVIGATED, event.sender, url);\r\n                webContents.send('maybeUrlChanged', url);\r\n            })\r\n            .navigatedInPage((event, url) => {\r\n                ipcMain.emit(WINDOW_NAVIGATED, event.sender, url);\r\n                webContents.send('maybeUrlChanged', url);\r\n            });\r\n    }\r\n\r\n}\r\n\r\nfunction isUrlInvalid(url: string): boolean {\r\n    return url == null || url.length === 0 || url === 'about:blank';\r\n}\r\n"]}