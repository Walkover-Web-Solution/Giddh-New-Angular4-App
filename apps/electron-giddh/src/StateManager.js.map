{"version":3,"file":"StateManager.js","sourceRoot":"","sources":["StateManager.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;AAEb,6CAAyB;AACzB,iDAA6B;AAE7B,IAAM,WAAW,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AAE3C,+CAA2B;AAC3B,+BAA6B;AAE7B,IAAI,KAAK,CAAC;AACV,IAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACnC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,KAAK,SAAS,EAAjB,CAAiB,CAAC,CAAC;AAE5C,0CAA0C;AAE1C,IAAM,UAAU,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC;AACnE,IAAM,QAAQ,GAAG,iBAAiB,IAAI,OAAO,CAAC,GAAG,CAAC;AAClD,IAAM,SAAS,GAAG,QAAQ;IACtB,CAAC,CAAC,UAAU;IACZ,CAAC,CAAC,OAAO,CAAC,UAAU;QACpB,gCAAgC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AAG/C,QAAA,WAAW,GAAG,GAAG,CAAC,MAAM,CAAC;IAClC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC;IAC5C,QAAQ,EAAE,OAAO;IACjB,OAAO,EAAE,IAAI;CAChB,CAAC,CAAC;AAEH,SAAS,cAAc;IACnB,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;IAC/B,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;IACtC,IAAI,KAAK,EAAE;QACP,OAAO,CAAC,iBAAiB,CAAC,CAAC,SAAS,EAAE;YAClC,QAAQ,EAAE,OAAO,CAAI,SAAS,oCAAiC,CAAC;SACnE,CAAC,CAAC;QACH,OAAO;YACH;gBACI,GAAG,EAAE,uBAAuB;gBAC5B,KAAK,EAAE,GAAG;gBACV,MAAM,EAAE,GAAG;gBACX,cAAc,EAAE;oBACZ,OAAO,EAAE,IAAI;oBACb,WAAW,EAAE,KAAK;oBAClB,QAAQ,EAAE,SAAS;iBACtB;aACJ;SACJ,CAAC;KACL;SAAM;QACH,OAAO;YACH;gBACI,GAAG,EAAE,mBAAW;gBAChB,KAAK,EAAE,GAAG;gBACV,MAAM,EAAE,GAAG;gBACX,cAAc,EAAE;oBACZ,OAAO,EAAE,IAAI;oBACb,WAAW,EAAE,KAAK;iBACrB;aACJ;SACJ,CAAC;KACL;AAGL,CAAC;AAED;IAKI;QAJQ,UAAK,GAAG,IAAI,WAAW,CAAC,kBAAkB,EAAE,EAAC,OAAO,EAAE,cAAc,EAAE,EAAC,CAAC,CAAC;QAK7E,IAAI,EAAE,CAAC,QAAQ,EAAE,KAAK,QAAQ,EAAE;YAC5B,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,aAAa,EAAE,oBAAoB,GAAG,CAAC,YAAK,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,CAAC;SACjI;IACL,CAAC;IAEM,qCAAc,GAArB;QACI,OAAO,CAAC,GAAG,CAAC,mBAAW,CAAC,CAAC;QACzB,IAAM,IAAI,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QAClC,IAAI,CAAC,OAAO,GAAG,cAAc,EAAE,CAAC;QAChC,IAAI,SAAS,EAAE;YAEX,OAAO,CAAC,GAAG,CAAC,oCAAoC,CAAC,GAAG,MAAM,CAAC;SAC9D;QACD,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC;IAC1B,CAAC;IAEM,iCAAU,GAAjB;QACI,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC,OAAO,CAAC;IACxC,CAAC;IAEM,2BAAI,GAAX;QACI,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACvB,IAAI,IAAI,IAAI,IAAI,EAAE;YACd,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC;SACzB;IACL,CAAC;IAEO,oCAAa,GAArB;QACI,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACrB,IAAI,IAAI,IAAI,IAAI,EAAE;YACd,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;YACtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SACpB;QACD,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;IAC1B,CAAC;IACL,mBAAC;AAAD,CAAC,AAzCD,IAyCC;AAzCY,oCAAY","sourcesContent":["'use strict';\n\nimport * as os from 'os';\nimport * as path from 'path';\n\nconst Configstore = require('configstore');\n\nimport * as url from 'url';\nimport {isDev} from './util';\n\nlet serve;\nconst args = process.argv.slice(1);\nserve = args.some(val => val === '--serve');\n\n// let win: Electron.BrowserWindow = null;\n\nconst getFromEnv = parseInt(process.env.ELECTRON_IS_DEV, 10) === 1;\nconst isEnvSet = 'ELECTRON_IS_DEV' in process.env;\nconst debugMode = isEnvSet\n    ? getFromEnv\n    : process.defaultApp ||\n    /node_modules[\\\\/]electron[\\\\/]/.test(process.execPath);\n\n\nexport const DEFAULT_URL = url.format({\n    pathname: path.join(__dirname, 'index.html'),\n    protocol: 'file:',\n    slashes: true\n});\n\nfunction defaultWindows() {\n    console.log('server: ', serve);\n    console.log('debugMode: ', debugMode);\n    if (serve) {\n        require('electron-reload')(__dirname, {\n            electron: require(`${__dirname}/../../../node_modules/electron`)\n        });\n        return [\n            {\n                url: 'http://localhost:4200',\n                width: 800,\n                height: 600,\n                webPreferences: {\n                    plugins: true,\n                    webSecurity: false,\n                    devTools: debugMode\n                }\n            }\n        ];\n    } else {\n        return [\n            {\n                url: DEFAULT_URL,\n                width: 800,\n                height: 600,\n                webPreferences: {\n                    plugins: true,\n                    webSecurity: false,\n                }\n            }\n        ];\n    }\n\n\n}\n\nexport class StateManager {\n    private store = new Configstore('Gidhh-unofficial', {windows: defaultWindows()});\n\n    private data: Config;\n\n    constructor() {\n        if (os.platform() === 'darwin') {\n            this.store.path = path.join(os.homedir(), 'Library', 'Preferences', 'org.walkover.giddh' + (isDev() ? '-dev' : '') + '.json');\n        }\n    }\n\n    public restoreWindows(): void {\n        console.log(DEFAULT_URL);\n        const data = this.getOrLoadData();\n        data.windows = defaultWindows();\n        if (debugMode) {\n\n            process.env['ELECTRON_DISABLE_SECURITY_WARNINGS'] = 'true';\n        }\n        this.store.all = data;\n    }\n\n    public getWindows(): WindowItem[] {\n        return this.getOrLoadData().windows;\n    }\n\n    public save(): void {\n        const data = this.data;\n        if (data != null) {\n            this.store.all = data;\n        }\n    }\n\n    private getOrLoadData(): Config {\n        let data = this.data;\n        if (data == null) {\n            data = this.store.all;\n            this.data = data;\n        }\n        return this.store.all;\n    }\n}\n\ninterface Config {\n    windows: WindowItem[];\n}\n\nexport interface WindowItem {\n    url: string;\n    width?: number;\n    height?: number;\n    x?: number;\n    y?: number;\n    maximized?: boolean;\n}\n"]}