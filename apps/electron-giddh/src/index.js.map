{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;;AAAA,qCAAsC;AACtC,4EAAuC;AACvC,+BAA2B;AAC3B,0EAA4C;AAC5C,uDAK4B;AAC5B,sGAAsE;AAEtE,IAAI,aAAa,GAAkB,IAAI,CAAC;AAExC,cAAG,CAAC,EAAE,CAAC,OAAO,EAAE;IACZ,kBAAO,CAAC,EAAE,CAAC,WAAW,EAAE,UAAC,KAAU,EAAE,GAAQ;QACzC,UAAG,CAAC,GAAG,CAAC,CAAC;IACb,CAAC,CAAC,CAAC;IAEH,wBAAO,EAAE,CAAC;IACV,aAAa,GAAG,IAAI,uBAAa,EAAE,CAAC;IACpC,aAAa,CAAC,WAAW,EAAE,CAAC;AAChC,CAAC,CAAC,CAAC;AACH,kBAAO,CAAC,EAAE,CAAC,UAAU,EAAE,UAAC,KAAK,EAAE,GAAG;IAC9B,aAAa,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC;AAGH,kBAAO,CAAC,EAAE,CAAC,cAAc,EAAE,UAAC,KAAK,EAAE,GAAG;IAElC,IAAI,GAAG,KAAK,QAAQ,EAAE;QAClB,IAAM,UAAU,GAAG,IAAI,gCAAoB,CAAC,4CAAyB,CAAC,QAAQ,EAC1E,4CAAyB,CAAC,YAAY,EACtC,CAAC,yDAAyD,EAAE,4CAA4C,CAAC,EACzG;YACI,kBAAkB,EAAE,iCAAiC;YACrD,gCAAgC,EAAE,KAAK;YACvC,mBAAmB,EAAE,IAAI;SAC5B,CACJ,CAAC;QAEF,UAAU,CAAC,0BAA0B,EAAE;aAClC,IAAI,CAAC,UAAA,KAAK;YACP,KAAK,CAAC,WAAW,GAAG,KAAK,CAAC;YAC1B,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;YAClD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;YACnC,8BAA8B;QAClC,CAAC,CAAC,CAAC;KACV;SAAM;QACH,IAAM,cAAc,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;QACjD,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,IAAI,GAAG,KAAK,QAAQ,EAAE;YAClB,SAAS;YACT,MAAM,GAAG,4CAAyB,CAAC;YACnC,UAAU,GAAG,8CAA2B,CAAC;SAC5C;aAAM;YACH,YAAY;YACZ,MAAM,GAAG,8CAA2B,CAAC;YACrC,UAAU,GAAG,gDAA6B,CAAC;SAC9C;QACD,IAAI;YACA,IAAM,UAAU,GAAG,cAAc,CAAC,MAAM,EAAE;gBACtC,WAAW,EAAE,IAAI;gBACjB,eAAe,EAAE,IAAI;gBACrB,cAAc,EAAE;oBACZ,QAAQ,EAAE,IAAI;oBACd,SAAS,EAAE,QAAQ;oBACnB,eAAe,EAAE,KAAK;iBACzB;aACJ,CAAC,CAAC;YACH,IAAM,KAAK,GAAG,UAAU,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YACpD,IAAI,GAAG,KAAK,QAAQ,EAAE;gBAClB,SAAS;gBACT,KAAK,CAAC,WAAW,GAAG,KAAK,CAAC,YAAY,CAAC;gBACvC,8EAA8E;aACjF;iBAAM;gBACH,YAAY;gBACZ,KAAK,CAAC,WAAW,GAAG,KAAK,CAAC,YAAY,CAAC;gBACvC,mFAAmF;aACtF;SACJ;QAAC,OAAO,CAAC,EAAE;YACR,EAAE;SACL;KACJ;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {app, ipcMain} from \"electron\";\nimport setMenu from \"./AppMenuManager\";\nimport {log} from \"./util\";\nimport WindowManager from \"./WindowManager\";\nimport {\n    AdditionalGoogleLoginParams,\n    AdditionalLinkedinLoginParams,\n    GoogleLoginElectronConfig,\n    LinkedinLoginElectronConfig\n} from \"./main-auth.config\";\nimport ElectronGoogleOAuth2 from '@getstation/electron-google-oauth2';\n\nlet windowManager: WindowManager = null;\n\napp.on(\"ready\", () => {\n    ipcMain.on(\"log.error\", (event: any, arg: any) => {\n        log(arg);\n    });\n\n    setMenu();\n    windowManager = new WindowManager();\n    windowManager.openWindows();\n});\nipcMain.on(\"open-url\", (event, arg) => {\n    windowManager.openWindows(arg);\n});\n\n\nipcMain.on(\"authenticate\", (event, arg) => {\n\n    if (arg === \"google\") {\n        const myApiOauth = new ElectronGoogleOAuth2(GoogleLoginElectronConfig.clientId,\n            GoogleLoginElectronConfig.clientSecret,\n            ['https://www.googleapis.com/auth/drive.metadata.readonly', 'https://www.googleapis.com/auth/gmail.send'],\n            {\n                successRedirectURL: \"http://localapp.giddh.com:3000/\",\n                loopbackInterfaceRedirectionPort: 45587,\n                refocusAfterSuccess: true,\n            }\n        );\n\n        myApiOauth.openAuthWindowAndGetTokens()\n            .then(token => {\n                event.returnValue = token;\n                event.sender.send('take-your-gmail-token', token);\n                console.log(JSON.stringify(token));\n                // use your token.access_token\n            });\n    } else {\n        const electronOauth2 = require(\"electron-oauth\");\n        let config = {};\n        let bodyParams = {};\n        if (arg === \"google\") {\n            // google\n            config = GoogleLoginElectronConfig;\n            bodyParams = AdditionalGoogleLoginParams;\n        } else {\n            // linked in\n            config = LinkedinLoginElectronConfig;\n            bodyParams = AdditionalLinkedinLoginParams;\n        }\n        try {\n            const myApiOauth = electronOauth2(config, {\n                alwaysOnTop: true,\n                autoHideMenuBar: true,\n                webPreferences: {\n                    devTools: true,\n                    partition: \"oauth2\",\n                    nodeIntegration: false\n                }\n            });\n            const token = myApiOauth.getAccessToken(bodyParams);\n            if (arg === \"google\") {\n                // google\n                event.returnValue = token.access_token;\n                // this.store.dispatch(this.loginAction.signupWithGoogle(token.access_token));\n            } else {\n                // linked in\n                event.returnValue = token.access_token;\n                // this.store.dispatch(this.loginAction.LinkedInElectronLogin(token.access_token));\n            }\n        } catch (e) {\n            //\n        }\n    }\n});\n"]}